// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample-data.proto

#ifndef PROTOBUF_sample_2ddata_2eproto__INCLUDED
#define PROTOBUF_sample_2ddata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace thunder {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sample_2ddata_2eproto();
void protobuf_InitDefaults_sample_2ddata_2eproto();
void protobuf_AssignDesc_sample_2ddata_2eproto();
void protobuf_ShutdownFile_sample_2ddata_2eproto();

class Entity;
class Entity_Position;
class Entity_Sensor;
class Person;

// ===================================================================

class Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thunder.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  static const Person* internal_default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  void UnsafeMergeFrom(const Person& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:thunder.Person)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_email();
  inline void clear_has_email();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_InitDefaults_sample_2ddata_2eproto_impl();
  friend void  protobuf_AddDesc_sample_2ddata_2eproto_impl();
  friend void protobuf_AssignDesc_sample_2ddata_2eproto();
  friend void protobuf_ShutdownFile_sample_2ddata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Person> Person_default_instance_;

// -------------------------------------------------------------------

class Entity_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thunder.Entity.Position) */ {
 public:
  Entity_Position();
  virtual ~Entity_Position();

  Entity_Position(const Entity_Position& from);

  inline Entity_Position& operator=(const Entity_Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity_Position& default_instance();

  static const Entity_Position* internal_default_instance();

  void Swap(Entity_Position* other);

  // implements Message ----------------------------------------------

  inline Entity_Position* New() const { return New(NULL); }

  Entity_Position* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity_Position& from);
  void MergeFrom(const Entity_Position& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entity_Position* other);
  void UnsafeMergeFrom(const Entity_Position& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:thunder.Entity.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_InitDefaults_sample_2ddata_2eproto_impl();
  friend void  protobuf_AddDesc_sample_2ddata_2eproto_impl();
  friend void protobuf_AssignDesc_sample_2ddata_2eproto();
  friend void protobuf_ShutdownFile_sample_2ddata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Entity_Position> Entity_Position_default_instance_;

// -------------------------------------------------------------------

class Entity_Sensor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thunder.Entity.Sensor) */ {
 public:
  Entity_Sensor();
  virtual ~Entity_Sensor();

  Entity_Sensor(const Entity_Sensor& from);

  inline Entity_Sensor& operator=(const Entity_Sensor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity_Sensor& default_instance();

  static const Entity_Sensor* internal_default_instance();

  void Swap(Entity_Sensor* other);

  // implements Message ----------------------------------------------

  inline Entity_Sensor* New() const { return New(NULL); }

  Entity_Sensor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity_Sensor& from);
  void MergeFrom(const Entity_Sensor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entity_Sensor* other);
  void UnsafeMergeFrom(const Entity_Sensor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  double range() const;
  void set_range(double value);

  // repeated double beam_width = 2;
  int beam_width_size() const;
  void clear_beam_width();
  static const int kBeamWidthFieldNumber = 2;
  double beam_width(int index) const;
  void set_beam_width(int index, double value);
  void add_beam_width(double value);
  const ::google::protobuf::RepeatedField< double >&
      beam_width() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_beam_width();

  // @@protoc_insertion_point(class_scope:thunder.Entity.Sensor)
 private:
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > beam_width_;
  double range_;
  friend void  protobuf_InitDefaults_sample_2ddata_2eproto_impl();
  friend void  protobuf_AddDesc_sample_2ddata_2eproto_impl();
  friend void protobuf_AssignDesc_sample_2ddata_2eproto();
  friend void protobuf_ShutdownFile_sample_2ddata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Entity_Sensor> Entity_Sensor_default_instance_;

// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thunder.Entity) */ {
 public:
  Entity();
  virtual ~Entity();

  Entity(const Entity& from);

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();

  static const Entity* internal_default_instance();

  void Swap(Entity* other);

  // implements Message ----------------------------------------------

  inline Entity* New() const { return New(NULL); }

  Entity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entity* other);
  void UnsafeMergeFrom(const Entity& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Entity_Position Position;
  typedef Entity_Sensor Sensor;

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required .thunder.Entity.Position pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::thunder::Entity_Position& pos() const;
  ::thunder::Entity_Position* mutable_pos();
  ::thunder::Entity_Position* release_pos();
  void set_allocated_pos(::thunder::Entity_Position* pos);

  // optional .thunder.Entity.Sensor sensor = 3;
  bool has_sensor() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 3;
  const ::thunder::Entity_Sensor& sensor() const;
  ::thunder::Entity_Sensor* mutable_sensor();
  ::thunder::Entity_Sensor* release_sensor();
  void set_allocated_sensor(::thunder::Entity_Sensor* sensor);

  // @@protoc_insertion_point(class_scope:thunder.Entity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_sensor();
  inline void clear_has_sensor();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::thunder::Entity_Position* pos_;
  ::thunder::Entity_Sensor* sensor_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_InitDefaults_sample_2ddata_2eproto_impl();
  friend void  protobuf_AddDesc_sample_2ddata_2eproto_impl();
  friend void protobuf_AssignDesc_sample_2ddata_2eproto();
  friend void protobuf_ShutdownFile_sample_2ddata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Entity> Entity_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// required string name = 1;
inline bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Person::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:thunder.Person.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thunder.Person.name)
}
inline void Person::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thunder.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thunder.Person.name)
}
inline ::std::string* Person::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:thunder.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:thunder.Person.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:thunder.Person.name)
}

// required int32 id = 2;
inline bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Person::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Person::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:thunder.Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:thunder.Person.id)
}

// required string email = 3;
inline bool Person::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Person::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:thunder.Person.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thunder.Person.email)
}
inline void Person::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thunder.Person.email)
}
inline void Person::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thunder.Person.email)
}
inline ::std::string* Person::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:thunder.Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_email() {
  // @@protoc_insertion_point(field_release:thunder.Person.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:thunder.Person.email)
}

inline const Person* Person::internal_default_instance() {
  return &Person_default_instance_.get();
}
// -------------------------------------------------------------------

// Entity_Position

// required double x = 1;
inline bool Entity_Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity_Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity_Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity_Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Entity_Position::x() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Position.x)
  return x_;
}
inline void Entity_Position::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Position.x)
}

// required double y = 2;
inline bool Entity_Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entity_Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entity_Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entity_Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Entity_Position::y() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Position.y)
  return y_;
}
inline void Entity_Position::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Position.y)
}

// optional double z = 3;
inline bool Entity_Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entity_Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entity_Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entity_Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Entity_Position::z() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Position.z)
  return z_;
}
inline void Entity_Position::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Position.z)
}

inline const Entity_Position* Entity_Position::internal_default_instance() {
  return &Entity_Position_default_instance_.get();
}
// -------------------------------------------------------------------

// Entity_Sensor

// required double range = 1;
inline bool Entity_Sensor::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity_Sensor::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity_Sensor::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity_Sensor::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline double Entity_Sensor::range() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Sensor.range)
  return range_;
}
inline void Entity_Sensor::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Sensor.range)
}

// repeated double beam_width = 2;
inline int Entity_Sensor::beam_width_size() const {
  return beam_width_.size();
}
inline void Entity_Sensor::clear_beam_width() {
  beam_width_.Clear();
}
inline double Entity_Sensor::beam_width(int index) const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Sensor.beam_width)
  return beam_width_.Get(index);
}
inline void Entity_Sensor::set_beam_width(int index, double value) {
  beam_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:thunder.Entity.Sensor.beam_width)
}
inline void Entity_Sensor::add_beam_width(double value) {
  beam_width_.Add(value);
  // @@protoc_insertion_point(field_add:thunder.Entity.Sensor.beam_width)
}
inline const ::google::protobuf::RepeatedField< double >&
Entity_Sensor::beam_width() const {
  // @@protoc_insertion_point(field_list:thunder.Entity.Sensor.beam_width)
  return beam_width_;
}
inline ::google::protobuf::RepeatedField< double >*
Entity_Sensor::mutable_beam_width() {
  // @@protoc_insertion_point(field_mutable_list:thunder.Entity.Sensor.beam_width)
  return &beam_width_;
}

inline const Entity_Sensor* Entity_Sensor::internal_default_instance() {
  return &Entity_Sensor_default_instance_.get();
}
// -------------------------------------------------------------------

// Entity

// required int32 id = 1;
inline bool Entity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Entity::id() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.id)
  return id_;
}
inline void Entity::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.id)
}

// required .thunder.Entity.Position pos = 2;
inline bool Entity::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entity::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entity::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entity::clear_pos() {
  if (pos_ != NULL) pos_->::thunder::Entity_Position::Clear();
  clear_has_pos();
}
inline const ::thunder::Entity_Position& Entity::pos() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.pos)
  return pos_ != NULL ? *pos_
                         : *::thunder::Entity_Position::internal_default_instance();
}
inline ::thunder::Entity_Position* Entity::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::thunder::Entity_Position;
  }
  // @@protoc_insertion_point(field_mutable:thunder.Entity.pos)
  return pos_;
}
inline ::thunder::Entity_Position* Entity::release_pos() {
  // @@protoc_insertion_point(field_release:thunder.Entity.pos)
  clear_has_pos();
  ::thunder::Entity_Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Entity::set_allocated_pos(::thunder::Entity_Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:thunder.Entity.pos)
}

// optional .thunder.Entity.Sensor sensor = 3;
inline bool Entity::has_sensor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entity::set_has_sensor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entity::clear_has_sensor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entity::clear_sensor() {
  if (sensor_ != NULL) sensor_->::thunder::Entity_Sensor::Clear();
  clear_has_sensor();
}
inline const ::thunder::Entity_Sensor& Entity::sensor() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.sensor)
  return sensor_ != NULL ? *sensor_
                         : *::thunder::Entity_Sensor::internal_default_instance();
}
inline ::thunder::Entity_Sensor* Entity::mutable_sensor() {
  set_has_sensor();
  if (sensor_ == NULL) {
    sensor_ = new ::thunder::Entity_Sensor;
  }
  // @@protoc_insertion_point(field_mutable:thunder.Entity.sensor)
  return sensor_;
}
inline ::thunder::Entity_Sensor* Entity::release_sensor() {
  // @@protoc_insertion_point(field_release:thunder.Entity.sensor)
  clear_has_sensor();
  ::thunder::Entity_Sensor* temp = sensor_;
  sensor_ = NULL;
  return temp;
}
inline void Entity::set_allocated_sensor(::thunder::Entity_Sensor* sensor) {
  delete sensor_;
  sensor_ = sensor;
  if (sensor) {
    set_has_sensor();
  } else {
    clear_has_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:thunder.Entity.sensor)
}

inline const Entity* Entity::internal_default_instance() {
  return &Entity_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace thunder

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sample_2ddata_2eproto__INCLUDED
