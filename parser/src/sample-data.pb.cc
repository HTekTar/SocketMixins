// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample-data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sample-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace thunder {

namespace {

const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_Sensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_Sensor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sample_2ddata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sample_2ddata_2eproto() {
  protobuf_AddDesc_sample_2ddata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sample-data.proto");
  GOOGLE_CHECK(file != NULL);
  Person_descriptor_ = file->message_type(0);
  static const int Person_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, email_),
  };
  Person_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_descriptor_,
      Person::internal_default_instance(),
      Person_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _has_bits_),
      -1,
      -1,
      sizeof(Person),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_));
  Entity_descriptor_ = file->message_type(1);
  static const int Entity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, sensor_),
  };
  Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_descriptor_,
      Entity::internal_default_instance(),
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_),
      -1,
      -1,
      sizeof(Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_));
  Entity_Position_descriptor_ = Entity_descriptor_->nested_type(0);
  static const int Entity_Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Position, z_),
  };
  Entity_Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_Position_descriptor_,
      Entity_Position::internal_default_instance(),
      Entity_Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Position, _has_bits_),
      -1,
      -1,
      sizeof(Entity_Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Position, _internal_metadata_));
  Entity_Sensor_descriptor_ = Entity_descriptor_->nested_type(1);
  static const int Entity_Sensor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Sensor, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Sensor, beam_width_),
  };
  Entity_Sensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_Sensor_descriptor_,
      Entity_Sensor::internal_default_instance(),
      Entity_Sensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Sensor, _has_bits_),
      -1,
      -1,
      sizeof(Entity_Sensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity_Sensor, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sample_2ddata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_descriptor_, Person::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_descriptor_, Entity::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_Position_descriptor_, Entity_Position::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_Sensor_descriptor_, Entity_Sensor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sample_2ddata_2eproto() {
  Person_default_instance_.Shutdown();
  delete Person_reflection_;
  Entity_default_instance_.Shutdown();
  delete Entity_reflection_;
  Entity_Position_default_instance_.Shutdown();
  delete Entity_Position_reflection_;
  Entity_Sensor_default_instance_.Shutdown();
  delete Entity_Sensor_reflection_;
}

void protobuf_InitDefaults_sample_2ddata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Person_default_instance_.DefaultConstruct();
  Entity_default_instance_.DefaultConstruct();
  Entity_Position_default_instance_.DefaultConstruct();
  Entity_Sensor_default_instance_.DefaultConstruct();
  Person_default_instance_.get_mutable()->InitAsDefaultInstance();
  Entity_default_instance_.get_mutable()->InitAsDefaultInstance();
  Entity_Position_default_instance_.get_mutable()->InitAsDefaultInstance();
  Entity_Sensor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_sample_2ddata_2eproto_once_);
void protobuf_InitDefaults_sample_2ddata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_sample_2ddata_2eproto_once_,
                 &protobuf_InitDefaults_sample_2ddata_2eproto_impl);
}
void protobuf_AddDesc_sample_2ddata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_sample_2ddata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021sample-data.proto\022\007thunder\"1\n\006Person\022\014"
    "\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\r\n\005email\030\003 \002(\t\""
    "\275\001\n\006Entity\022\n\n\002id\030\001 \002(\005\022%\n\003pos\030\002 \002(\0132\030.th"
    "under.Entity.Position\022&\n\006sensor\030\003 \001(\0132\026."
    "thunder.Entity.Sensor\032+\n\010Position\022\t\n\001x\030\001"
    " \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \001(\001\032+\n\006Sensor\022\r\n\005"
    "range\030\001 \002(\001\022\022\n\nbeam_width\030\002 \003(\001", 271);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sample-data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sample_2ddata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sample_2ddata_2eproto_once_);
void protobuf_AddDesc_sample_2ddata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sample_2ddata_2eproto_once_,
                 &protobuf_AddDesc_sample_2ddata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sample_2ddata_2eproto {
  StaticDescriptorInitializer_sample_2ddata_2eproto() {
    protobuf_AddDesc_sample_2ddata_2eproto();
  }
} static_descriptor_initializer_sample_2ddata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kNameFieldNumber;
const int Person::kIdFieldNumber;
const int Person::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sample_2ddata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:thunder.Person)
}

void Person::InitAsDefaultInstance() {
}

Person::Person(const Person& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thunder.Person)
}

void Person::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:thunder.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  protobuf_InitDefaults_sample_2ddata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Person> Person_default_instance_;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:thunder.Person)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = 0;
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thunder.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thunder.Person.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // required string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thunder.Person.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thunder.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thunder.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thunder.Person)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thunder.Person.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thunder.Person.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thunder.Person)
}

::google::protobuf::uint8* Person::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:thunder.Person)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thunder.Person.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thunder.Person.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thunder.Person)
  return target;
}

size_t Person::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:thunder.Person)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_email()) {
    // required string email = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  return total_size;
}
size_t Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thunder.Person)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string email = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thunder.Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Person* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thunder.Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thunder.Person)
    UnsafeMergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thunder.Person)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Person::UnsafeMergeFrom(const Person& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thunder.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thunder.Person)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Person::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  email_.Swap(&other->email_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// required string name = 1;
bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Person::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:thunder.Person.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thunder.Person.name)
}
void Person::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thunder.Person.name)
}
void Person::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thunder.Person.name)
}
::std::string* Person::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:thunder.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:thunder.Person.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:thunder.Person.name)
}

// required int32 id = 2;
bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Person::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Person::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:thunder.Person.id)
  return id_;
}
void Person::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:thunder.Person.id)
}

// required string email = 3;
bool Person::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Person::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
void Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
void Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:thunder.Person.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:thunder.Person.email)
}
void Person::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:thunder.Person.email)
}
void Person::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:thunder.Person.email)
}
::std::string* Person::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:thunder.Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Person::release_email() {
  // @@protoc_insertion_point(field_release:thunder.Person.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:thunder.Person.email)
}

inline const Person* Person::internal_default_instance() {
  return &Person_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity_Position::kXFieldNumber;
const int Entity_Position::kYFieldNumber;
const int Entity_Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity_Position::Entity_Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sample_2ddata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:thunder.Entity.Position)
}

void Entity_Position::InitAsDefaultInstance() {
}

Entity_Position::Entity_Position(const Entity_Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thunder.Entity.Position)
}

void Entity_Position::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Entity_Position::~Entity_Position() {
  // @@protoc_insertion_point(destructor:thunder.Entity.Position)
  SharedDtor();
}

void Entity_Position::SharedDtor() {
}

void Entity_Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity_Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_Position_descriptor_;
}

const Entity_Position& Entity_Position::default_instance() {
  protobuf_InitDefaults_sample_2ddata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Entity_Position> Entity_Position_default_instance_;

Entity_Position* Entity_Position::New(::google::protobuf::Arena* arena) const {
  Entity_Position* n = new Entity_Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:thunder.Entity.Position)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Entity_Position, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Entity_Position*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entity_Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thunder.Entity.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thunder.Entity.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thunder.Entity.Position)
  return false;
#undef DO_
}

void Entity_Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thunder.Entity.Position)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thunder.Entity.Position)
}

::google::protobuf::uint8* Entity_Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:thunder.Entity.Position)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thunder.Entity.Position)
  return target;
}

size_t Entity_Position::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:thunder.Entity.Position)
  size_t total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Entity_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thunder.Entity.Position)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double z = 3;
  if (has_z()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity_Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thunder.Entity.Position)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity_Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity_Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thunder.Entity.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thunder.Entity.Position)
    UnsafeMergeFrom(*source);
  }
}

void Entity_Position::MergeFrom(const Entity_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thunder.Entity.Position)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Entity_Position::UnsafeMergeFrom(const Entity_Position& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Entity_Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thunder.Entity.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity_Position::CopyFrom(const Entity_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thunder.Entity.Position)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Entity_Position::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Entity_Position::Swap(Entity_Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity_Position::InternalSwap(Entity_Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity_Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_Position_descriptor_;
  metadata.reflection = Entity_Position_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity_Sensor::kRangeFieldNumber;
const int Entity_Sensor::kBeamWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity_Sensor::Entity_Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sample_2ddata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:thunder.Entity.Sensor)
}

void Entity_Sensor::InitAsDefaultInstance() {
}

Entity_Sensor::Entity_Sensor(const Entity_Sensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thunder.Entity.Sensor)
}

void Entity_Sensor::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
}

Entity_Sensor::~Entity_Sensor() {
  // @@protoc_insertion_point(destructor:thunder.Entity.Sensor)
  SharedDtor();
}

void Entity_Sensor::SharedDtor() {
}

void Entity_Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity_Sensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_Sensor_descriptor_;
}

const Entity_Sensor& Entity_Sensor::default_instance() {
  protobuf_InitDefaults_sample_2ddata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Entity_Sensor> Entity_Sensor_default_instance_;

Entity_Sensor* Entity_Sensor::New(::google::protobuf::Arena* arena) const {
  Entity_Sensor* n = new Entity_Sensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:thunder.Entity.Sensor)
  range_ = 0;
  beam_width_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entity_Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thunder.Entity.Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double range = 1;
      case 1: {
        if (tag == 9) {
          set_has_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_beam_width;
        break;
      }

      // repeated double beam_width = 2;
      case 2: {
        if (tag == 17) {
         parse_beam_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_beam_width())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_beam_width())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_beam_width;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thunder.Entity.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thunder.Entity.Sensor)
  return false;
#undef DO_
}

void Entity_Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thunder.Entity.Sensor)
  // required double range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->range(), output);
  }

  // repeated double beam_width = 2;
  for (int i = 0; i < this->beam_width_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->beam_width(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thunder.Entity.Sensor)
}

::google::protobuf::uint8* Entity_Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:thunder.Entity.Sensor)
  // required double range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->range(), target);
  }

  // repeated double beam_width = 2;
  for (int i = 0; i < this->beam_width_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->beam_width(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thunder.Entity.Sensor)
  return target;
}

size_t Entity_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thunder.Entity.Sensor)
  size_t total_size = 0;

  // required double range = 1;
  if (has_range()) {
    total_size += 1 + 8;
  }
  // repeated double beam_width = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->beam_width_size();
    data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->beam_width_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity_Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thunder.Entity.Sensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity_Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity_Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thunder.Entity.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thunder.Entity.Sensor)
    UnsafeMergeFrom(*source);
  }
}

void Entity_Sensor::MergeFrom(const Entity_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thunder.Entity.Sensor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Entity_Sensor::UnsafeMergeFrom(const Entity_Sensor& from) {
  GOOGLE_DCHECK(&from != this);
  beam_width_.UnsafeMergeFrom(from.beam_width_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Entity_Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thunder.Entity.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity_Sensor::CopyFrom(const Entity_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thunder.Entity.Sensor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Entity_Sensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Entity_Sensor::Swap(Entity_Sensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity_Sensor::InternalSwap(Entity_Sensor* other) {
  std::swap(range_, other->range_);
  beam_width_.UnsafeArenaSwap(&other->beam_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity_Sensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_Sensor_descriptor_;
  metadata.reflection = Entity_Sensor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kIdFieldNumber;
const int Entity::kPosFieldNumber;
const int Entity::kSensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sample_2ddata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:thunder.Entity)
}

void Entity::InitAsDefaultInstance() {
  pos_ = const_cast< ::thunder::Entity_Position*>(
      ::thunder::Entity_Position::internal_default_instance());
  sensor_ = const_cast< ::thunder::Entity_Sensor*>(
      ::thunder::Entity_Sensor::internal_default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:thunder.Entity)
}

void Entity::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  sensor_ = NULL;
  id_ = 0;
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:thunder.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (this != &Entity_default_instance_.get()) {
    delete pos_;
    delete sensor_;
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  protobuf_InitDefaults_sample_2ddata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Entity> Entity_default_instance_;

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:thunder.Entity)
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::thunder::Entity_Position::Clear();
    }
    if (has_sensor()) {
      if (sensor_ != NULL) sensor_->::thunder::Entity_Sensor::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thunder.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .thunder.Entity.Position pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sensor;
        break;
      }

      // optional .thunder.Entity.Sensor sensor = 3;
      case 3: {
        if (tag == 26) {
         parse_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thunder.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thunder.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thunder.Entity)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .thunder.Entity.Position pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // optional .thunder.Entity.Sensor sensor = 3;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sensor_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:thunder.Entity)
}

::google::protobuf::uint8* Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:thunder.Entity)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .thunder.Entity.Position pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  // optional .thunder.Entity.Sensor sensor = 3;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sensor_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thunder.Entity)
  return target;
}

size_t Entity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:thunder.Entity)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_pos()) {
    // required .thunder.Entity.Position pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  return total_size;
}
size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thunder.Entity)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required .thunder.Entity.Position pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .thunder.Entity.Sensor sensor = 3;
  if (has_sensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sensor_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thunder.Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thunder.Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thunder.Entity)
    UnsafeMergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thunder.Entity)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Entity::UnsafeMergeFrom(const Entity& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      mutable_pos()->::thunder::Entity_Position::MergeFrom(from.pos());
    }
    if (from.has_sensor()) {
      mutable_sensor()->::thunder::Entity_Sensor::MergeFrom(from.sensor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thunder.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thunder.Entity)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Entity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_sensor()) {
    if (!this->sensor_->IsInitialized()) return false;
  }
  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  std::swap(id_, other->id_);
  std::swap(pos_, other->pos_);
  std::swap(sensor_, other->sensor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity_Position

// required double x = 1;
bool Entity_Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entity_Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Entity_Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entity_Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Entity_Position::x() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Position.x)
  return x_;
}
void Entity_Position::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Position.x)
}

// required double y = 2;
bool Entity_Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entity_Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Entity_Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entity_Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Entity_Position::y() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Position.y)
  return y_;
}
void Entity_Position::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Position.y)
}

// optional double z = 3;
bool Entity_Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Entity_Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Entity_Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Entity_Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
double Entity_Position::z() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Position.z)
  return z_;
}
void Entity_Position::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Position.z)
}

inline const Entity_Position* Entity_Position::internal_default_instance() {
  return &Entity_Position_default_instance_.get();
}
// -------------------------------------------------------------------

// Entity_Sensor

// required double range = 1;
bool Entity_Sensor::has_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entity_Sensor::set_has_range() {
  _has_bits_[0] |= 0x00000001u;
}
void Entity_Sensor::clear_has_range() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entity_Sensor::clear_range() {
  range_ = 0;
  clear_has_range();
}
double Entity_Sensor::range() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Sensor.range)
  return range_;
}
void Entity_Sensor::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.Sensor.range)
}

// repeated double beam_width = 2;
int Entity_Sensor::beam_width_size() const {
  return beam_width_.size();
}
void Entity_Sensor::clear_beam_width() {
  beam_width_.Clear();
}
double Entity_Sensor::beam_width(int index) const {
  // @@protoc_insertion_point(field_get:thunder.Entity.Sensor.beam_width)
  return beam_width_.Get(index);
}
void Entity_Sensor::set_beam_width(int index, double value) {
  beam_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:thunder.Entity.Sensor.beam_width)
}
void Entity_Sensor::add_beam_width(double value) {
  beam_width_.Add(value);
  // @@protoc_insertion_point(field_add:thunder.Entity.Sensor.beam_width)
}
const ::google::protobuf::RepeatedField< double >&
Entity_Sensor::beam_width() const {
  // @@protoc_insertion_point(field_list:thunder.Entity.Sensor.beam_width)
  return beam_width_;
}
::google::protobuf::RepeatedField< double >*
Entity_Sensor::mutable_beam_width() {
  // @@protoc_insertion_point(field_mutable_list:thunder.Entity.Sensor.beam_width)
  return &beam_width_;
}

inline const Entity_Sensor* Entity_Sensor::internal_default_instance() {
  return &Entity_Sensor_default_instance_.get();
}
// -------------------------------------------------------------------

// Entity

// required int32 id = 1;
bool Entity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Entity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entity::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Entity::id() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.id)
  return id_;
}
void Entity::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:thunder.Entity.id)
}

// required .thunder.Entity.Position pos = 2;
bool Entity::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entity::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void Entity::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entity::clear_pos() {
  if (pos_ != NULL) pos_->::thunder::Entity_Position::Clear();
  clear_has_pos();
}
const ::thunder::Entity_Position& Entity::pos() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.pos)
  return pos_ != NULL ? *pos_
                         : *::thunder::Entity_Position::internal_default_instance();
}
::thunder::Entity_Position* Entity::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::thunder::Entity_Position;
  }
  // @@protoc_insertion_point(field_mutable:thunder.Entity.pos)
  return pos_;
}
::thunder::Entity_Position* Entity::release_pos() {
  // @@protoc_insertion_point(field_release:thunder.Entity.pos)
  clear_has_pos();
  ::thunder::Entity_Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
void Entity::set_allocated_pos(::thunder::Entity_Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:thunder.Entity.pos)
}

// optional .thunder.Entity.Sensor sensor = 3;
bool Entity::has_sensor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Entity::set_has_sensor() {
  _has_bits_[0] |= 0x00000004u;
}
void Entity::clear_has_sensor() {
  _has_bits_[0] &= ~0x00000004u;
}
void Entity::clear_sensor() {
  if (sensor_ != NULL) sensor_->::thunder::Entity_Sensor::Clear();
  clear_has_sensor();
}
const ::thunder::Entity_Sensor& Entity::sensor() const {
  // @@protoc_insertion_point(field_get:thunder.Entity.sensor)
  return sensor_ != NULL ? *sensor_
                         : *::thunder::Entity_Sensor::internal_default_instance();
}
::thunder::Entity_Sensor* Entity::mutable_sensor() {
  set_has_sensor();
  if (sensor_ == NULL) {
    sensor_ = new ::thunder::Entity_Sensor;
  }
  // @@protoc_insertion_point(field_mutable:thunder.Entity.sensor)
  return sensor_;
}
::thunder::Entity_Sensor* Entity::release_sensor() {
  // @@protoc_insertion_point(field_release:thunder.Entity.sensor)
  clear_has_sensor();
  ::thunder::Entity_Sensor* temp = sensor_;
  sensor_ = NULL;
  return temp;
}
void Entity::set_allocated_sensor(::thunder::Entity_Sensor* sensor) {
  delete sensor_;
  sensor_ = sensor;
  if (sensor) {
    set_has_sensor();
  } else {
    clear_has_sensor();
  }
  // @@protoc_insertion_point(field_set_allocated:thunder.Entity.sensor)
}

inline const Entity* Entity::internal_default_instance() {
  return &Entity_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace thunder

// @@protoc_insertion_point(global_scope)
